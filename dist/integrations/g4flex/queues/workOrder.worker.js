"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }// src/integrations/g4flex/queues/workOrder.worker.js

// Este arquivo define um worker que processa as ordens de servi√ßo (OS) da fila 'workOrderQueue'.
// Ele atribui um t√©cnico dispon√≠vel √† OS e atualiza o status da OS.
// Se n√£o houver t√©cnico dispon√≠vel, a OS √© reagendada para um tempo futuro.

var _bullmq = require('bullmq');
var _redis = require('./redis'); var _redis2 = _interopRequireDefault(_redis);
var _WorkOrderService = require('../services/WorkOrderService'); var _WorkOrderService2 = _interopRequireDefault(_WorkOrderService);
var _workOrderqueue = require('./workOrder.queue'); var _workOrderqueue2 = _interopRequireDefault(_workOrderqueue);
var _WhatsAppService = require('../services/WhatsAppService'); var _WhatsAppService2 = _interopRequireDefault(_WhatsAppService);
var _WorkOrderWaitingQueueService = require('../../../services/WorkOrderWaitingQueueService'); var _WorkOrderWaitingQueueService2 = _interopRequireDefault(_WorkOrderWaitingQueueService);
var _TechnicianService = require('../services/TechnicianService'); var _TechnicianService2 = _interopRequireDefault(_TechnicianService);

const RETRY_INTERVAL_MS = 1 * 60 * 1000;
const TIMEZONE_BRASILIA = 'America/Sao_Paulo';

// Function to generate date in Brazil timezone
function generateNextAttemptDate(delay) {
  const futureDate = new Date(Date.now() + delay);
  return new Intl.DateTimeFormat('pt-BR', {
    timeZone: TIMEZONE_BRASILIA,
    dateStyle: 'short',
    timeStyle: 'medium'
  }).format(futureDate);
}

const workOrderWorker = new (0, _bullmq.Worker)(
  "workOrderQueue",
  async (job) => {
    const jobType = job.name;

    // Processar com base no tipo de job
    if (jobType === "createWorkOrder") {
      return await processCreateWorkOrder(job);
    } else if (jobType === "assignTechnician") {
      return await processAssignTechnician(job);
    } else if (jobType === "processWorkOrderFeedback") {
      return await processWorkOrderFeedback(job);
    } else if (jobType === "cancelWorkOrder") {
      return await processCancelWorkOrder(job);
    } else if (jobType === "processArrivalCheck") {
      return await processArrivalCheck(job);
    } else {
      console.log(`‚ùì Tipo de job n√£o reconhecido: ${jobType}`);
      throw new Error(`Tipo de job n√£o reconhecido: ${jobType}`);
    }
  },
  {
    connection: _redis2.default,
  }
);

// Fun√ß√£o para processar cria√ß√£o de ordem de servi√ßo
async function processCreateWorkOrder(job) {
  console.log(`üîÑ Processando cria√ß√£o de ordem de servi√ßo para job #${job.id}`);

  const orderData = job.data;

  try {
    // Registrar na fila de espera que a ordem est√° sendo processada
    const queueResult = await _WorkOrderWaitingQueueService2.default.createInQueue({
      orderNumber: orderData.orderId || 'Em processamento',
      entityName: orderData.customerName,
      uraRequestId: orderData.uraRequestId,
      priority: orderData.priority || 'normal',
      source: 'g4flex',
      customerIdentifier: orderData.identifierValue,
      productId: orderData.productId,
      requesterNameAndPosition: orderData.requesterNameAndPosition,
      incidentAndReceiverName: orderData.incidentAndReceiverName,
      requesterContact: orderData.requesterContact,
    });

    // Se for uma solicita√ß√£o duplicada, retornar o resultado do servi√ßo
    if (!queueResult.success && queueResult.error === 'DUPLICATE_REQUEST') {
      console.warn(`‚ö†Ô∏è Solicita√ß√£o duplicada detectada para uraRequestId: ${orderData.uraRequestId}`);
      return queueResult;
    }

    // Chamar o servi√ßo para criar a ordem
    const result = await _WorkOrderService2.default.createWorkOrder(orderData);
    console.log(`‚úÖ Ordem de servi√ßo ${result.workOrder} criada com sucesso`);

    // Atualizar status na fila de espera
    await _WorkOrderWaitingQueueService2.default.updateQueueStatus(
      orderData.uraRequestId,
      result.workOrder,
      'WAITING_TECHNICIAN'
    );

    // Atualizar o n√∫mero da ordem na fila de espera
    await _WorkOrderWaitingQueueService2.default.updateQueueOrderNumber(
      orderData.uraRequestId,
      result.workOrder
    );

    // Adicionar na fila de atribui√ß√£o de t√©cnico
    await _workOrderqueue2.default.add("assignTechnician", {
      orderId: result.workOrder,
      uraRequestId: orderData.uraRequestId,
      customerName: orderData.customerName,
      requesterContact: orderData.requesterContact
    });

    console.log(
      `üì® Ordem ${result.workOrder} adicionada √† fila de atribui√ß√£o de t√©cnico`
    );

    return { success: true, workOrder: result.workOrder };
  } catch (error) {
    console.error(`‚ùå Erro ao criar ordem de servi√ßo:`, error);

    // Registrar falha na fila de espera, se poss√≠vel
    if (orderData.uraRequestId) {
      try {
        await _WorkOrderWaitingQueueService2.default.updateQueueStatus(
          orderData.uraRequestId,
          orderData.orderId,
          'FAILED'
        );
      } catch (queueError) {
        console.error('Erro ao atualizar status na fila de espera:', queueError);
      }
    }

    throw error;
  }
}

// Fun√ß√£o para processar atribui√ß√£o de t√©cnico √† ordem
async function processAssignTechnician(job) {
  const { orderId, uraRequestId, customerName, requesterContact } = job.data;
  console.log(`üîÑ Processando atribui√ß√£o de t√©cnico para ordem ${orderId}`);

  try {
    // Verificar se h√° um t√©cnico dispon√≠vel antes de continuar
    const technician = await _TechnicianService2.default.getAvailableTechnician();

    if (!technician) {
      console.log(`‚ö†Ô∏è Sem t√©cnicos dispon√≠veis no momento`);

      // Reagendar para nova tentativa
      const delay = RETRY_INTERVAL_MS;
      const nextAttemptDate = generateNextAttemptDate(delay);

      await _workOrderqueue2.default.add("assignTechnician",
        {
          orderId,
          uraRequestId,
          customerName,
          requesterContact,
          retryCount: (job.data.retryCount || 0) + 1
        },
        {
          delay,
          removeOnComplete: false
        }
      );

      console.log(`üìÖ Reagendada nova tentativa para ordem ${orderId} em ${nextAttemptDate}`);
      return { success: false, noTechnician: true, rescheduled: true, nextAttempt: nextAttemptDate };
    }

    // Se temos um t√©cnico dispon√≠vel, buscar a ordem mais antiga aguardando atribui√ß√£o
    const oldestOrder = await _WorkOrderWaitingQueueService2.default.findOldestWaitingOrder();

    // Se n√£o h√° nenhuma ordem aguardando, usar a ordem atual
    if (!oldestOrder) {
      console.log(`‚ö†Ô∏è Nenhuma ordem aguardando atribui√ß√£o. Verificando a ordem atual ${orderId}`);

      // Verificar se a ordem atual est√° aguardando t√©cnico
      const currentOrder = await _WorkOrderWaitingQueueService2.default.findByOrderNumber(orderId);

      if (!currentOrder || currentOrder.status !== 'WAITING_TECHNICIAN') {
        console.log(`‚ö†Ô∏è Ordem atual ${orderId} n√£o est√° aguardando t√©cnico ou n√£o existe`);
        return { success: false, message: 'Ordem n√£o est√° aguardando t√©cnico' };
      }

      // Usar a ordem atual se ela estiver aguardando t√©cnico
      const validUraRequestId = currentOrder.uraRequestId || uraRequestId;
      const orderStatus = await _WorkOrderService2.default.isOrderFulfilledORCancelled(orderId);

      if (orderStatus.isCancelled) {
        console.log(`‚ö†Ô∏è Ordem ${orderId} j√° foi cancelada`);
        await _WorkOrderWaitingQueueService2.default.updateQueueStatus(
          validUraRequestId,
          orderId,
          'CANCELED'
        );
        return { success: false, orderCancelled: true };
      } else if (orderStatus.isFulfilled) {
        console.log(`‚ö†Ô∏è Ordem ${orderId} j√° foi conclu√≠da`);
        await _WorkOrderWaitingQueueService2.default.updateQueueStatus(
          validUraRequestId,
          orderId,
          'FULFILLED'
        );
        return { success: false, orderFulfilled: true };
      }

      // Processar a ordem atual
      const result = await _WorkOrderService2.default.assignTechnicianToWorkOrder(
        orderId,
        validUraRequestId,
        customerName,
        requesterContact
      );

      // Atualizar status na fila de espera
      await _WorkOrderWaitingQueueService2.default.updateQueueStatus(
        validUraRequestId,
        orderId,
        'WAITING_ARRIVAL'
      );

      // Registrar o t√©cnico atribu√≠do
      if (result.technicianId) {
        await _WorkOrderWaitingQueueService2.default.updateTechnicianAssigned(
          validUraRequestId,
          result.technicianName || result.technicianId
        );
        console.log(`‚úÖ T√©cnico ${result.technicianName || result.technicianId} registrado para ordem ${orderId}`);
      }

      // Adicionar na fila de verifica√ß√£o de chegada no cliente
      await _workOrderqueue2.default.add("processArrivalCheck", {
        orderId,
        uraRequestId: validUraRequestId,
        technicianName: result.technicianName || result.technicianId
      }, {
        delay: 1 * 60 * 1000, // 1 minuto de delay
        removeOnComplete: false
      });

      console.log(`üìÖ Verifica√ß√£o de chegada agendada para ordem ${orderId} em 1 minuto`);

      return result;
    } else {
      // Usar a ordem mais antiga
      const oldestOrderId = oldestOrder.orderNumber;
      const oldestUraRequestId = oldestOrder.uraRequestId;
      const oldestCustomerName = oldestOrder.entityName;
      const oldestRequesterContact = oldestOrder.requesterContact;

      console.log(`üïí Encontrada ordem mais antiga aguardando t√©cnico: ${oldestOrderId}`);

      if (oldestOrderId === orderId) {
        console.log(`‚úÖ A ordem atual ${orderId} √© a mais antiga aguardando t√©cnico`);
      } else {
        console.log(`üîÑ Redirecionando atribui√ß√£o de t√©cnico da ordem ${orderId} para ordem mais antiga ${oldestOrderId}`);
      }

      const orderStatus = await _WorkOrderService2.default.isOrderFulfilledORCancelled(oldestOrderId);

      if (orderStatus.isCancelled) {
        console.log(`‚ö†Ô∏è Ordem ${oldestOrderId} j√° foi cancelada`);
        await _WorkOrderWaitingQueueService2.default.updateQueueStatus(
          oldestUraRequestId,
          oldestOrderId,
          'CANCELED'
        );
        // Tentar novamente com outra ordem
        return processAssignTechnician(job);
      } else if (orderStatus.isFulfilled) {
        console.log(`‚ö†Ô∏è Ordem ${oldestOrderId} j√° foi conclu√≠da`);
        await _WorkOrderWaitingQueueService2.default.updateQueueStatus(
          oldestUraRequestId,
          oldestOrderId,
          'FULFILLED'
        );
        // Tentar novamente com outra ordem
        return processAssignTechnician(job);
      }

      // Processar a ordem mais antiga
      const result = await _WorkOrderService2.default.assignTechnicianToWorkOrder(
        oldestOrderId,
        oldestUraRequestId,
        oldestCustomerName,
        oldestRequesterContact
      );

      // Atualizar status na fila de espera
      await _WorkOrderWaitingQueueService2.default.updateQueueStatus(
        oldestUraRequestId,
        oldestOrderId,
        'WAITING_ARRIVAL'
      );

      // Registrar o t√©cnico atribu√≠do
      if (result.technicianId) {
        await _WorkOrderWaitingQueueService2.default.updateTechnicianAssigned(
          oldestUraRequestId,
          result.technicianName || result.technicianId
        );
        console.log(`‚úÖ T√©cnico ${result.technicianName || result.technicianId} registrado para ordem ${oldestOrderId}`);
      }

      // Adicionar na fila de verifica√ß√£o de chegada no cliente
      await _workOrderqueue2.default.add("processArrivalCheck", {
        orderId: oldestOrderId,
        uraRequestId: oldestUraRequestId,
        technicianName: result.technicianName || result.technicianId
      }, {
        delay: 1 * 60 * 1000, // 1 minuto de delay
        removeOnComplete: false
      });

      console.log(`üìÖ Verifica√ß√£o de chegada agendada para ordem ${oldestOrderId} em 1 minuto`);

      // Reagendar a ordem atual se ela n√£o foi a processada
      if (orderId !== oldestOrderId) {
        console.log(`üìù Ordem atual ${orderId} n√£o foi processada pois n√£o era a mais antiga`);
      }

      return {
        ...result,
        prioritizedOrder: {
          oldOrderId: oldestOrderId,
          originalOrderId: orderId
        },
        message: `Ordem mais antiga ${oldestOrderId} foi priorizada${orderId !== oldestOrderId ? ` sobre a ordem atual ${orderId}` : ''}`
      };
    }

  } catch (error) {
    console.error(`‚ùå Erro ao atribuir t√©cnico √† ordem ${orderId}:`, error);

    // Registra a falha, mas reagenda para nova tentativa
    const delay = RETRY_INTERVAL_MS;
    const nextAttemptDate = generateNextAttemptDate(delay);
    const validUraRequestId = uraRequestId || `retry-${Date.now()}`;

    await _workOrderqueue2.default.add("assignTechnician",
      {
        orderId,
        uraRequestId: validUraRequestId,
        customerName,
        requesterContact,
        retryCount: (job.data.retryCount || 0) + 1
      },
      {
        delay,
        removeOnComplete: false
      }
    );

    console.log(`üìÖ Reagendada nova tentativa para ordem ${orderId} em ${nextAttemptDate}`);
    return { success: false, rescheduled: true, nextAttempt: nextAttemptDate };
  }
}

// Fun√ß√£o para processar feedback de OS para a URA
async function processWorkOrderFeedback(job) {
  const {
    orderId = '',
    feedback = '',
    technicianName = '',
    technicianId = '',
    uraRequestId = '',
    requesterContact = '',
    customerName = ''
  } = job.data || {};
  console.log(`üîÑ INIT Processando feedback de ordem ${orderId}, URA Request ID: ${uraRequestId}`);

  try {
    // Passar o objeto com os par√¢metros nomeados conforme esperado pelo WhatsAppService
    const result = await _WhatsAppService2.default.sendWhatsAppMessage({
      phoneNumber: requesterContact,
      workOrderId: orderId,
      customerName: customerName,
      feedback: feedback,
      technicianName: technicianName,
      uraRequestId: uraRequestId
    });

    console.log(`‚úÖ Feedback processado com sucesso para ordem ${orderId}`);
    return result;

  } catch (error) {
    console.error(`‚ùå Erro ao processar feedback de ordem ${orderId}:`, error);

    // Tentar novamente ap√≥s um intervalo
    const delay = RETRY_INTERVAL_MS;
    const nextAttemptDate = generateNextAttemptDate(delay);

    await _workOrderqueue2.default.add("processWorkOrderFeedback",
      {
        orderId,
        feedback,
        technicianName,
        technicianId,
        uraRequestId: uraRequestId,
        requesterContact,
        customerName,
        retryCount: (job.data.retryCount || 0) + 1
      },
      {
        delay,
        removeOnComplete: false
      }
    );

    console.log(`üìÖ Reagendado processamento de feedback para ordem ${orderId} em ${nextAttemptDate}`);
    return {
      success: false,
      error: error.message,
      rescheduled: true,
      nextAttempt: nextAttemptDate
    };
  }
}

// Fun√ß√£o para processar cancelamento de ordem de servi√ßo
async function processCancelWorkOrder(job) {
  const { identifierType, identifierValue, uraRequestId, cancellationRequesterInfo } = job.data;
  console.log(`üîÑ Processando cancelamento de ordem para cliente ${identifierValue}`);

  try {
    const result = await _WorkOrderService2.default.closeWorkOrderByCustomerId({
      identifierType,
      identifierValue,
      uraRequestId,
      cancellationRequesterInfo
    });

    // Atualizar status na fila de espera para todas as ordens canceladas
    if (result.orders && result.orders.length > 0) {
      await Promise.all(result.orders.map(async (orderNumber) => {
        await _WorkOrderWaitingQueueService2.default.updateQueueStatus(
          uraRequestId,
          orderNumber,
          'CANCELED'
        );
      }));

      // Enviar feedback WhatsApp de cancelamento para cada ordem cancelada
      try {
        await Promise.all(result.orders.map(async (orderNumber) => {
          // Buscar dados da ordem ORIGINAL pelo orderNumber, n√£o pelo uraRequestId de cancelamento
          const queueData = await _WorkOrderWaitingQueueService2.default.findByOrderNumber(orderNumber);
          const customerName = _optionalChain([queueData, 'optionalAccess', _ => _.entityName]);
          const phoneNumber = _optionalChain([queueData, 'optionalAccess', _2 => _2.requesterContact]);

          if (phoneNumber && customerName) {
            await _WhatsAppService2.default.sendWhatsAppMessage({
              phoneNumber: phoneNumber,
              workOrderId: orderNumber,
              customerName: customerName,
              feedback: 'order_cancelled',
              uraRequestId: uraRequestId
            });
            console.log(`üì± Feedback de cancelamento enviado via WhatsApp para ${customerName} - ${phoneNumber} (ordem: ${orderNumber})`);
          } else {
            console.log(`‚ö†Ô∏è N√£o foi poss√≠vel enviar feedback de cancelamento para ordem ${orderNumber}: dados insuficientes (nome: ${customerName}, telefone: ${phoneNumber})`);
          }
        }));
      } catch (feedbackError) {
        console.error('‚ùå Erro ao enviar feedback de cancelamento via WhatsApp:', feedbackError);
      }

      console.log(`‚úÖ Ordens canceladas com sucesso: ${result.orders.join(', ')}`);
    } else {
      console.log(`‚ÑπÔ∏è Nenhuma ordem encontrada para cancelar para o cliente ${identifierValue}`);
    }

    return result;

  } catch (error) {
    console.error(`‚ùå Erro ao cancelar ordens:`, error);

    // Tentar encontrar ID da ordem para registrar falha, se poss√≠vel
    try {
      // Verificar se o erro aconteceu em uma ordem espec√≠fica
      const orderId = error.orderId || null;

      if (orderId) {
        await _WorkOrderWaitingQueueService2.default.updateQueueStatus(
          uraRequestId,
          orderId,
          'FAILED'
        );
      } else {
        console.warn('‚ö†Ô∏è N√£o foi poss√≠vel determinar a ordem espec√≠fica para registrar falha');
      }
    } catch (queueError) {
      console.error('Erro ao atualizar status na fila de espera:', queueError);
    }

    // Re-lan√ßar o erro para permitir que o BullMQ trate conforme configurado
    throw error;
  }
}

// Fun√ß√£o para processar verifica√ß√£o de chegada no cliente
async function processArrivalCheck(job) {
  const { orderId, uraRequestId, technicianName, retryCount = 0 } = job.data;
  console.log(`üîÑ Processando verifica√ß√£o de chegada para ordem ${orderId} - T√©cnico: ${technicianName}`);

  try {
    // Garantir que temos um uraRequestId v√°lido
    const validUraRequestId = uraRequestId;

    // Verificar se a ordem foi cancelada ou conclu√≠da
    const orderStatus = await _WorkOrderService2.default.isOrderFulfilledORCancelled(orderId);

    if (orderStatus.isCancelled) {
      console.log(`‚ö†Ô∏è Ordem ${orderId} j√° foi cancelada`);
      await _WorkOrderWaitingQueueService2.default.updateQueueStatus(
        validUraRequestId,
        orderId,
        'CANCELED'
      );
      return { success: false, orderCancelled: true };
    } else if (orderStatus.isFulfilled) {
      console.log(`‚úÖ Ordem ${orderId} j√° foi conclu√≠da`);
      await _WorkOrderWaitingQueueService2.default.updateQueueStatus(
        validUraRequestId,
        orderId,
        'FINISHED'
      );
      return { success: true, orderCompleted: true };
    }

    // Reagendar pr√≥xima verifica√ß√£o em 1 minuto (at√© que caia em um dos ifs)
    await _workOrderqueue2.default.add("processArrivalCheck", {
      orderId,
      uraRequestId: validUraRequestId,
      technicianName,
      retryCount: retryCount + 1
    }, {
      delay: 2 * 60 * 1000, // 1 minuto
      removeOnComplete: false
    });

    console.log(`üìÖ Pr√≥xima verifica√ß√£o agendada para ordem ${orderId} em 2 minutos`);

    return {
      success: true,
      message: `Verifica√ß√£o ${retryCount + 1} conclu√≠da para ordem ${orderId}`,
      nextCheck: '1_minute'
    };

  } catch (error) {
    console.error(`‚ùå Erro ao verificar ordem ${orderId}:`, error);

    // Reagendar verifica√ß√£o em caso de erro
    const delay = 2 * 60 * 1000; // 2 minutos
    const nextAttemptDate = generateNextAttemptDate(delay);
    const validUraRequestId = uraRequestId || `retry-arrival-${Date.now()}`;

    await _workOrderqueue2.default.add("processArrivalCheck",
      {
        orderId,
        uraRequestId: validUraRequestId,
        technicianName,
        retryCount: (job.data.retryCount || 0) + 1
      },
      {
        delay,
        removeOnComplete: false
      }
    );

    console.log(`üìÖ Reagendada verifica√ß√£o para ordem ${orderId} em ${nextAttemptDate} devido a erro`);
    return { success: false, rescheduled: true, nextAttempt: nextAttemptDate };
  }
}

exports. default = workOrderWorker;
