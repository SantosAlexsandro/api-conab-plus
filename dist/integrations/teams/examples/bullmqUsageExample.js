"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var _TeamsAuthServicejs = require('../services/TeamsAuthService.js'); var _TeamsAuthServicejs2 = _interopRequireDefault(_TeamsAuthServicejs);
var _TeamsServicejs = require('../services/TeamsService.js'); var _TeamsServicejs2 = _interopRequireDefault(_TeamsServicejs);
var _teamsTokenRefreshQueuejs = require('../queues/teamsTokenRefreshQueue.js');

// Exemplo de uso do sistema Teams com BullMQ
// Demonstra como a renova√ß√£o autom√°tica funciona de forma robusta

class TeamsBullMQUsageExample {
  constructor() {
    this.teamsAuth = _TeamsAuthServicejs2.default;
    this.teamsService = _TeamsServicejs2.default;
  }

  // Exemplo completo: autentica√ß√£o + uso autom√°tico
  async fullWorkflowWithBullMQ(userId = 'user_bullmq_example') {
    try {
      console.log('üöÄ Iniciando workflow completo com BullMQ...\n');

      // Passo 1: Verificar se j√° est√° autenticado
      const isAuthenticated = this.teamsAuth.isUserAuthenticated(userId);

      if (!isAuthenticated) {
        console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado. Iniciando processo de autentica√ß√£o...');

        // Gerar URL de autoriza√ß√£o
        const authUrl = this.teamsAuth.generateAuthUrl(userId);
        console.log('üìã URL de autoriza√ß√£o:', authUrl);
        console.log('\nüí° Abra esta URL no navegador, autorize a aplica√ß√£o e copie o c√≥digo da URL de callback');
        console.log('üí° Depois execute: example.handleAuthCallback(userId, authCode)');

        return {
          step: 'authentication_required',
          authUrl,
          instructions: 'Complete a autentica√ß√£o no navegador'
        };
      }

      // Passo 2: Demonstrar funcionamento autom√°tico
      console.log('‚úÖ Usu√°rio autenticado! Demonstrando funcionalidades...\n');

      // Obter informa√ß√µes do usu√°rio
      const userInfo = await this.teamsAuth.getUserInfo(userId);
      console.log(`üë§ Usu√°rio: ${userInfo.displayName} (${userInfo.userPrincipalName})`);

      // Listar chats
      const chats = await this.teamsService.getUserChats(userId);
      console.log(`üí¨ Chats encontrados: ${chats.length}`);

      // Mostrar status dos tokens
      await this.showTokenStatus(userId);

      // Demonstrar que a renova√ß√£o √© autom√°tica
      console.log('\nüîÑ Sistema BullMQ gerencia renova√ß√£o autom√°tica de tokens:');
      console.log('  ‚úÖ Tokens s√£o renovados automaticamente 10 minutos antes do vencimento');
      console.log('  ‚úÖ Jobs s√£o persistidos no Redis - sobrevivem a restarts');
      console.log('  ‚úÖ Sistema robusto com retry e monitoramento');
      console.log('  ‚úÖ Dashboard dispon√≠vel para monitoramento');

      return {
        step: 'completed',
        userInfo: {
          name: userInfo.displayName,
          email: userInfo.userPrincipalName
        },
        chatsCount: chats.length,
        systemStatus: 'automated_renewal_active'
      };

    } catch (error) {
      console.error('‚ùå Erro no workflow:', error.message);
      throw error;
    }
  }

  // Processa callback de autentica√ß√£o
  async handleAuthCallback(userId, authCode) {
    try {
      console.log('üîÑ Processando callback de autentica√ß√£o...');

      // Trocar c√≥digo por tokens
      const tokens = await this.teamsAuth.exchangeCodeForTokens(authCode, userId);

      console.log('‚úÖ Tokens obtidos com sucesso!');
      console.log(`üìÖ Token expira em: ${tokens.expiresAt.toLocaleString('pt-BR')}`);

      // O BullMQ automaticamente agendou a renova√ß√£o quando os tokens foram obtidos
      console.log('üîÑ Renova√ß√£o autom√°tica agendada pelo BullMQ');

      return tokens;

    } catch (error) {
      console.error('‚ùå Erro no callback:', error.message);
      throw error;
    }
  }

  // Demonstra o envio de mensagem com renova√ß√£o autom√°tica
  async sendMessageWithAutoRenewal(userId, message = 'ü§ñ Mensagem de teste do sistema CONAB+ com renova√ß√£o autom√°tica!') {
    try {
      console.log('üì§ Enviando mensagem com sistema de renova√ß√£o autom√°tica...');

      // Listar chats para encontrar um destino
      const chats = await this.teamsService.getUserChats(userId);

      if (chats.length === 0) {
        console.log('‚ö†Ô∏è Nenhum chat dispon√≠vel para envio');
        return null;
      }

      // Enviar para o primeiro chat
      const targetChat = chats[0];
      console.log(`üìß Enviando para chat: ${targetChat.topic || 'Chat sem t√≠tulo'}`);

      const result = await this.teamsService.sendMessage(userId, targetChat.id, message);

      console.log('‚úÖ Mensagem enviada com sucesso!');
      console.log('üí° Se o token estivesse pr√≥ximo do vencimento, seria renovado automaticamente');

      return result;

    } catch (error) {
      console.error('‚ùå Erro ao enviar mensagem:', error.message);
      throw error;
    }
  }

  // Mostra status dos tokens e sistema
  async showTokenStatus(userId) {
    try {
      const tokenCache = this.teamsAuth.tokenCache;
      const userTokens = tokenCache.get(userId);

      if (!userTokens) {
        console.log('‚ùå Tokens n√£o encontrados para o usu√°rio');
        return;
      }

      const now = new Date();
      const timeUntilExpiry = Math.round((userTokens.expiresAt - now) / (1000 * 60));

      console.log('\nüìä Status dos Tokens:');
      console.log(`  üìÖ Expira em: ${userTokens.expiresAt.toLocaleString('pt-BR')}`);
      console.log(`  ‚è∞ Tempo restante: ${timeUntilExpiry} minutos`);

      if (timeUntilExpiry <= 15) {
        console.log('  üîÑ Renova√ß√£o ser√° executada em breve');
      } else {
        console.log('  ‚úÖ Token v√°lido');
      }

      // Mostrar estat√≠sticas da queue
      const queueStats = await _teamsTokenRefreshQueuejs.getQueueStats.call(void 0, );
      console.log('\nüìà Estat√≠sticas da Queue:');
      console.log(`  üìã Jobs aguardando: ${queueStats.waiting}`);
      console.log(`  ‚ö° Jobs ativos: ${queueStats.active}`);
      console.log(`  ‚úÖ Jobs completados: ${queueStats.completed}`);
      console.log(`  ‚ùå Jobs falhados: ${queueStats.failed}`);

    } catch (error) {
      console.error('‚ùå Erro ao obter status:', error.message);
    }
  }

  // Simula um cen√°rio de alta carga
  async simulateHighLoadScenario(userId) {
    try {
      console.log('üî• Simulando cen√°rio de alta carga...');

      const operations = [];

      // Simular m√∫ltiplas opera√ß√µes simult√¢neas
      for (let i = 0; i < 5; i++) {
        operations.push(
          this.teamsService.getUserChats(userId).catch(err => ({error: err.message}))
        );
      }

      const results = await Promise.allSettled(operations);
      const successful = results.filter(r => r.status === 'fulfilled' && !r.value.error).length;
      const failed = results.length - successful;

      console.log(`üìä Resultado da simula√ß√£o: ${successful} sucessos, ${failed} falhas`);
      console.log('üí° BullMQ gerencia renova√ß√£o de token automaticamente mesmo sob alta carga');

      return { successful, failed, total: results.length };

    } catch (error) {
      console.error('‚ùå Erro na simula√ß√£o:', error.message);
      throw error;
    }
  }

  // Exemplo de notifica√ß√£o de Work Order usando sistema robusto
  async sendWorkOrderNotificationRobust(userId, workOrderData) {
    try {
      console.log('üìã Enviando notifica√ß√£o robusta de Work Order...');

      const message = `
üîß **Nova Ordem de Servi√ßo - Sistema Automatizado**

**N√∫mero:** ${workOrderData.id}
**Cliente:** ${workOrderData.cliente}
**Prioridade:** ${workOrderData.prioridade}
**Status:** ${workOrderData.status || 'Em andamento'}

**Descri√ß√£o:** ${workOrderData.descricao}

**T√©cnico:** ${workOrderData.tecnico || 'A ser designado'}
**Prazo:** ${workOrderData.prazo || 'Conforme SLA'}

---
*‚úÖ Notifica√ß√£o autom√°tica do CONAB+ com renova√ß√£o de token BullMQ*
*üîÑ Sistema resiliente e monitorado*
      `;

      // Buscar chats e enviar
      const chats = await this.teamsService.getUserChats(userId);

      if (chats.length > 0) {
        const result = await this.teamsService.sendMessage(userId, chats[0].id, message);
        console.log('‚úÖ Notifica√ß√£o de Work Order enviada com sucesso!');
        console.log('üí™ Sistema BullMQ garante entrega mesmo com tokens expirando');
        return result;
      } else {
        console.log('‚ö†Ô∏è Nenhum chat dispon√≠vel para notifica√ß√£o');
        return null;
      }

    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√£o robusta:', error.message);
      throw error;
    }
  }
}

exports. default = TeamsBullMQUsageExample;

// Exemplo de uso:
// const example = new TeamsBullMQUsageExample();
// await example.fullWorkflowWithBullMQ('meu_usuario');
