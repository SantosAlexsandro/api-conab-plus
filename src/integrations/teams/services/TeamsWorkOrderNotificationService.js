import TeamsService from './TeamsService.js';
import TeamsAuthService from './TeamsAuthService.js';
import axios from 'axios';

// Servi√ßo especializado para notifica√ß√µes de Work Orders no Teams
class TeamsWorkOrderNotificationService {
  constructor() {
    // ID do chat espec√≠fico fornecido pelo usu√°rio
    this.targetChatId = '19:b2f438dde3f74c5daf960d92dbecf443@thread.v2';

    // Usu√°rio padr√£o para envio de notifica√ß√µes
    this.defaultNotificationUser = process.env.TEAMS_NOTIFICATION_USER_ID || 'notification_bot';

    this.teamsService = TeamsService;
    this.teamsAuth = TeamsAuthService;
  }

  // Envia notifica√ß√£o de nova ordem de servi√ßo criada
  async sendWorkOrderCreatedNotification(workOrderData) {
    try {
      console.log(`[TeamsWorkOrderNotification] üìã Enviando notifica√ß√£o de nova OS: ${workOrderData.workOrder}`);

      const isAuthenticated = this.teamsAuth.isUserAuthenticated(this.defaultNotificationUser);

      if (!isAuthenticated) {
        console.warn(`[TeamsWorkOrderNotification] ‚ö†Ô∏è Usu√°rio de notifica√ß√£o n√£o autenticado: ${this.defaultNotificationUser}`);
        return {
          success: false,
          reason: 'notification_user_not_authenticated',
          message: 'Configure a autentica√ß√£o do usu√°rio de notifica√ß√£o'
        };
      }

      const message = this.formatWorkOrderCreatedMessage(workOrderData);
      const result = await this.sendToSpecificChat(message);

      if (result.success) {
        console.log(`[TeamsWorkOrderNotification] ‚úÖ Notifica√ß√£o enviada com sucesso para OS ${workOrderData.workOrder}`);
      }

      return result;

    } catch (error) {
      console.error(`[TeamsWorkOrderNotification] ‚ùå Erro ao enviar notifica√ß√£o:`, error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // Envia notifica√ß√£o de t√©cnico atribu√≠do
  async sendTechnicianAssignedNotification(workOrderData, technicianData) {
    try {
      console.log(`[TeamsWorkOrderNotification] üë®‚Äçüîß Enviando notifica√ß√£o de t√©cnico atribu√≠do: OS ${workOrderData.orderId}`);

      const isAuthenticated = this.teamsAuth.isUserAuthenticated(this.defaultNotificationUser);

      if (!isAuthenticated) {
        console.warn(`[TeamsWorkOrderNotification] ‚ö†Ô∏è Usu√°rio de notifica√ß√£o n√£o autenticado`);
        return { success: false, reason: 'notification_user_not_authenticated' };
      }

      const message = this.formatTechnicianAssignedMessage(workOrderData, technicianData);
      const result = await this.sendToSpecificChat(message);

      if (result.success) {
        console.log(`[TeamsWorkOrderNotification] ‚úÖ Notifica√ß√£o de t√©cnico enviada para OS ${workOrderData.orderId}`);
      }

      return result;

    } catch (error) {
      console.error(`[TeamsWorkOrderNotification] ‚ùå Erro ao enviar notifica√ß√£o de t√©cnico:`, error.message);
      return { success: false, error: error.message };
    }
  }

  // Envia notifica√ß√£o de status da ordem
  async sendWorkOrderStatusNotification(workOrderData, status, additionalInfo = {}) {
    try {
      console.log(`[TeamsWorkOrderNotification] üìä Enviando notifica√ß√£o de status: OS ${workOrderData.orderId} - ${status}`);

      const isAuthenticated = this.teamsAuth.isUserAuthenticated(this.defaultNotificationUser);

      if (!isAuthenticated) {
        console.warn(`[TeamsWorkOrderNotification] ‚ö†Ô∏è Usu√°rio de notifica√ß√£o n√£o autenticado`);
        return { success: false, reason: 'notification_user_not_authenticated' };
      }

      const message = this.formatStatusUpdateMessage(workOrderData, status, additionalInfo);
      const result = await this.sendToSpecificChat(message);

      if (result.success) {
        console.log(`[TeamsWorkOrderNotification] ‚úÖ Notifica√ß√£o de status enviada para OS ${workOrderData.orderId}`);
      }

      return result;

    } catch (error) {
      console.error(`[TeamsWorkOrderNotification] ‚ùå Erro ao enviar notifica√ß√£o de status:`, error.message);
      return { success: false, error: error.message };
    }
  }

  // Envia notifica√ß√£o de t√©cnico atribu√≠do
  async sendTechnicianAssignedNotification(workOrderData, technicianData) {
    try {
      console.log(`[TeamsWorkOrderNotification] üë®‚Äçüîß Enviando notifica√ß√£o de t√©cnico atribu√≠do: OS ${workOrderData.orderId}`);

      const isAuthenticated = this.teamsAuth.isUserAuthenticated(this.defaultNotificationUser);

      if (!isAuthenticated) {
        console.warn(`[TeamsWorkOrderNotification] ‚ö†Ô∏è Usu√°rio de notifica√ß√£o n√£o autenticado`);
        return { success: false, reason: 'notification_user_not_authenticated' };
      }

      const message = this.formatTechnicianAssignedMessage(workOrderData, technicianData);
      const result = await this.sendToSpecificChat(message);

      if (result.success) {
        console.log(`[TeamsWorkOrderNotification] ‚úÖ Notifica√ß√£o de t√©cnico enviada para OS ${workOrderData.orderId}`);
      }

      return result;

    } catch (error) {
      console.error(`[TeamsWorkOrderNotification] ‚ùå Erro ao enviar notifica√ß√£o de t√©cnico:`, error.message);
      return { success: false, error: error.message };
    }
  }

    // Envia mensagem para o chat espec√≠fico
  async sendToSpecificChat(message) {
    try {
      const accessToken = await this.teamsAuth.getValidAccessToken(this.defaultNotificationUser);

      const response = await axios.post(
        `https://graph.microsoft.com/v1.0/chats/${this.targetChatId}/messages`,
        {
          body: {
            contentType: 'html',
            content: message
          }
        },
        {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
            'Content-Type': 'application/json'
          }
        }
      );

      console.log(`[TeamsWorkOrderNotification] üì§ Mensagem enviada para chat ${this.targetChatId}`);

      return {
        success: true,
        messageId: response.data.id,
        chatId: this.targetChatId
      };

    } catch (error) {
      const errorMessage = error.response?.data?.error?.message || error.message;
      console.error(`[TeamsWorkOrderNotification] ‚ùå Erro ao enviar para chat espec√≠fico:`, errorMessage);
      throw new Error(`Teams API Error: ${errorMessage}`);
    }
  }

  // Formata mensagem de nova ordem criada
  formatWorkOrderCreatedMessage(workOrderData) {
    const timestamp = new Date().toLocaleString('pt-BR', {
      timeZone: 'America/Sao_Paulo'
    });

    return `
<div>
<h3>üÜï <strong>Nova Ordem de Servi√ßo Criada</strong></h3>

<table style="border-collapse: collapse; width: 100%;">
<tr style="background-color: #f0f8ff;">
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">N√∫mero da OS:</td>
  <td style="border: 1px solid #ddd; padding: 8px; color: #0066cc;"><strong>${workOrderData.workOrder}</strong></td>
</tr>
<tr>
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Cliente:</td>
  <td style="border: 1px solid #ddd; padding: 8px;">${workOrderData.customerName || 'N√£o informado'}</td>
</tr>
<tr style="background-color: #f9f9f9;">
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Prioridade:</td>
  <td style="border: 1px solid #ddd; padding: 8px;">${this.getPriorityBadge(workOrderData.priority)}</td>
</tr>
<tr>
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Contato:</td>
  <td style="border: 1px solid #ddd; padding: 8px;">${workOrderData.requesterContact || 'N√£o informado'}</td>
</tr>
<tr style="background-color: #f9f9f9;">
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Status:</td>
  <td style="border: 1px solid #ddd; padding: 8px;">‚è≥ <span style="color: #ff6600;"><strong>Aguardando T√©cnico</strong></span></td>
</tr>
</table>

<div style="margin-top: 15px; padding: 10px; background-color: #e7f3ff; border-left: 4px solid #0066cc;">
<strong>üìã Detalhes:</strong><br/>
${workOrderData.incidentAndReceiverName || 'Sem detalhes adicionais'}
</div>

<div style="margin-top: 10px; font-size: 12px; color: #666;">
üìÖ <em>Criada em: ${timestamp} | Sistema: CONAB+ | Fonte: G4Flex</em>
</div>
</div>
    `;
  }

  // Formata mensagem de t√©cnico atribu√≠do
  formatTechnicianAssignedMessage(workOrderData, technicianData) {
    const timestamp = new Date().toLocaleString('pt-BR', {
      timeZone: 'America/Sao_Paulo',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    return `
<div>
<h3>üë®‚Äçüîß <strong>T√©cnico Atribu√≠do</strong></h3>

<table style="border-collapse: collapse; width: 100%; font-family: Arial, sans-serif;">
<tr style="background-color: #f0fff0;">
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Ordem de Servi√ßo:</td>
  <td style="border: 1px solid #ddd; padding: 8px; color: #0066cc;"><strong>${workOrderData.orderId}</strong></td>
</tr>
<tr>
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">T√©cnico:</td>
  <td style="border: 1px solid #ddd; padding: 8px;">üë§ <strong>${technicianData.name || technicianData.id}</strong></td>
</tr>
<tr style="background-color: #f9f9f9;">
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Cliente:</td>
  <td style="border: 1px solid #ddd; padding: 8px;">${workOrderData.customerName || 'N√£o informado'}</td>
</tr>
<tr>
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Status:</td>
  <td style="border: 1px solid #ddd; padding: 8px;">‚úÖ <span style="color: #009900;"><strong>T√©cnico Atribu√≠do</strong></span></td>
</tr>
</table>

<div style="margin-top: 10px; font-size: 12px; color: #666;">
üìÖ <em>Atribu√≠do em: ${timestamp} | Sistema: CONAB+</em>
</div>
</div>
    `;
  }

  // Formata mensagem de atualiza√ß√£o de status
  formatStatusUpdateMessage(workOrderData, status, additionalInfo) {
    const timestamp = new Date().toLocaleString('pt-BR', {
      timeZone: 'America/Sao_Paulo',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    const statusInfo = this.getStatusInfo(status);

    return `
<div>
<h3>${statusInfo.icon} <strong>Atualiza√ß√£o de Status</strong></h3>

<table style="border-collapse: collapse; width: 100%; font-family: Arial, sans-serif;">
<tr style="background-color: ${statusInfo.bgColor};">
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Ordem de Servi√ßo:</td>
  <td style="border: 1px solid #ddd; padding: 8px; color: #0066cc;"><strong>${workOrderData.orderId}</strong></td>
</tr>
<tr>
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Novo Status:</td>
  <td style="border: 1px solid #ddd; padding: 8px;">${statusInfo.icon} <strong style="color: ${statusInfo.color};">${statusInfo.label}</strong></td>
</tr>
<tr style="background-color: #f9f9f9;">
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Cliente:</td>
  <td style="border: 1px solid #ddd; padding: 8px;">${workOrderData.customerName || 'N√£o informado'}</td>
</tr>
</table>

${additionalInfo.message ? `
<div style="margin-top: 15px; padding: 10px; background-color: #f0f8ff; border-left: 4px solid #0066cc;">
<strong>üìù Informa√ß√µes Adicionais:</strong><br/>
${additionalInfo.message}
</div>
` : ''}

<div style="margin-top: 10px; font-size: 12px; color: #666;">
üìÖ <em>Atualizado em: ${timestamp} | Sistema: CONAB+</em>
</div>
</div>
    `;
  }

  // Formata mensagem de t√©cnico atribu√≠do
  formatTechnicianAssignedMessage(workOrderData, technicianData) {
    const timestamp = new Date().toLocaleString('pt-BR', {
      timeZone: 'America/Sao_Paulo'
    });

    return `
<div>
<h3>üë®‚Äçüîß <strong>T√©cnico Atribu√≠do</strong></h3>

<table style="border-collapse: collapse; width: 100%;">
<tr style="background-color: #f0fff0;">
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Ordem de Servi√ßo:</td>
  <td style="border: 1px solid #ddd; padding: 8px; color: #0066cc;"><strong>${workOrderData.orderId}</strong></td>
</tr>
<tr>
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">T√©cnico:</td>
  <td style="border: 1px solid #ddd; padding: 8px;">üë§ <strong>${technicianData.name || technicianData.id}</strong></td>
</tr>
<tr style="background-color: #f9f9f9;">
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Cliente:</td>
  <td style="border: 1px solid #ddd; padding: 8px;">${workOrderData.customerName || 'N√£o informado'}</td>
</tr>
<tr>
  <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">Status:</td>
  <td style="border: 1px solid #ddd; padding: 8px;">‚úÖ <span style="color: #009900;"><strong>T√©cnico Atribu√≠do</strong></span></td>
</tr>
</table>

<div style="margin-top: 10px; font-size: 12px; color: #666;">
üìÖ <em>Atribu√≠do em: ${timestamp} | Sistema: CONAB+</em>
</div>
</div>
    `;
  }

  // Retorna badge de prioridade formatado
  getPriorityBadge(priority) {
    switch (priority?.toLowerCase()) {
      case 'high':
      case 'alta':
        return 'üî¥ <strong style="color: #cc0000;">ALTA</strong>';
      case 'medium':
      case 'm√©dia':
      case 'media':
        return 'üü° <strong style="color: #ff6600;">M√âDIA</strong>';
      case 'low':
      case 'baixa':
        return 'üü¢ <strong style="color: #009900;">BAIXA</strong>';
      default:
        return '‚ö™ <strong>NORMAL</strong>';
    }
  }

  // Retorna informa√ß√µes de status formatadas
  getStatusInfo(status) {
    const statusMap = {
      'WAITING_TECHNICIAN': {
        icon: '‚è≥',
        label: 'Aguardando T√©cnico',
        color: '#ff6600',
        bgColor: '#fff3e0'
      },
      'ASSIGNED': {
        icon: '‚úÖ',
        label: 'T√©cnico Atribu√≠do',
        color: '#009900',
        bgColor: '#f0fff0'
      },
      'IN_PROGRESS': {
        icon: 'üîß',
        label: 'Em Andamento',
        color: '#0066cc',
        bgColor: '#e7f3ff'
      },
      'COMPLETED': {
        icon: '‚úÖ',
        label: 'Conclu√≠da',
        color: '#009900',
        bgColor: '#f0fff0'
      },
      'CANCELLED': {
        icon: '‚ùå',
        label: 'Cancelada',
        color: '#cc0000',
        bgColor: '#ffe7e7'
      },
      'FAILED': {
        icon: '‚ùå',
        label: 'Falha',
        color: '#cc0000',
        bgColor: '#ffe7e7'
      }
    };

    return statusMap[status] || {
      icon: 'üìä',
      label: status,
      color: '#666666',
      bgColor: '#f9f9f9'
    };
  }

  // Configurar usu√°rio padr√£o para notifica√ß√µes
  setDefaultNotificationUser(userId) {
    this.defaultNotificationUser = userId;
    console.log(`[TeamsWorkOrderNotification] üîß Usu√°rio de notifica√ß√£o configurado: ${userId}`);
  }

  // Verificar status de configura√ß√£o
  getConfigurationStatus() {
    const isUserAuthenticated = this.teamsAuth.isUserAuthenticated(this.defaultNotificationUser);

    return {
      targetChatId: this.targetChatId,
      notificationUser: this.defaultNotificationUser,
      isAuthenticated: isUserAuthenticated,
      configured: !!this.targetChatId && isUserAuthenticated
    };
  }
}

const teamsWorkOrderNotificationService = new TeamsWorkOrderNotificationService();
export default teamsWorkOrderNotificationService;
