import TeamsAuthService from '../services/TeamsAuthService.js';
import TeamsService from '../services/TeamsService.js';

// Exemplo pr√°tico de uso da integra√ß√£o Teams

class TeamsUsageExample {
  constructor() {
    this.teamsAuth = TeamsAuthService;
    this.teamsService = TeamsService;
  }

  // 1. Primeiro passo: Iniciar autentica√ß√£o
  async startAuthentication(userId = 'user123') {
    try {
      console.log('üöÄ Iniciando autentica√ß√£o do Teams...');

      // Gera URL de autoriza√ß√£o
      const authUrl = this.teamsAuth.generateAuthUrl(userId);

      console.log('üìã URL de autoriza√ß√£o gerada:');
      console.log(authUrl);
      console.log('\nüí° Abra esta URL no navegador para autorizar a aplica√ß√£o');

      return authUrl;
    } catch (error) {
      console.error('‚ùå Erro ao iniciar autentica√ß√£o:', error.message);
      throw error;
    }
  }

  // 2. Segundo passo: Processar callback (simular)
  async handleCallback(userId, authCode) {
    try {
      console.log('üîÑ Processando callback de autentica√ß√£o...');

      const tokens = await this.teamsAuth.exchangeCodeForTokens(userId, authCode);

      console.log('‚úÖ Tokens obtidos com sucesso!');
      console.log('üìù Informa√ß√µes do token:');
      console.log(`- Expires at: ${tokens.expiresAt}`);
      console.log(`- Has refresh token: ${!!tokens.refreshToken}`);

      return tokens;
    } catch (error) {
      console.error('‚ùå Erro no callback:', error.message);
      throw error;
    }
  }

  // 3. Obter informa√ß√µes do usu√°rio
  async getUserInfo(userId) {
    try {
      console.log('üë§ Obtendo informa√ß√µes do usu√°rio...');

      const userInfo = await this.teamsAuth.getUserInfo(userId);

      console.log('‚úÖ Informa√ß√µes do usu√°rio:');
      console.log(`- Nome: ${userInfo.displayName}`);
      console.log(`- Email: ${userInfo.userPrincipalName}`);
      console.log(`- ID: ${userInfo.id}`);

      return userInfo;
    } catch (error) {
      console.error('‚ùå Erro ao obter informa√ß√µes:', error.message);
      throw error;
    }
  }

  // 4. Listar chats do usu√°rio
  async listUserChats(userId) {
    try {
      console.log('üí¨ Listando chats do usu√°rio...');

      const chats = await this.teamsService.getUserChats(userId);

      console.log(`‚úÖ Encontrados ${chats.length} chats:`);
      chats.slice(0, 5).forEach((chat, index) => {
        console.log(`${index + 1}. ${chat.topic || 'Chat sem t√≠tulo'} (ID: ${chat.id})`);
      });

      return chats;
    } catch (error) {
      console.error('‚ùå Erro ao listar chats:', error.message);
      throw error;
    }
  }

  // 5. Enviar mensagem para um chat
  async sendMessage(userId, chatId, message) {
    try {
      console.log('üì§ Enviando mensagem...');

      const result = await this.teamsService.sendMessage(userId, chatId, message);

      console.log('‚úÖ Mensagem enviada com sucesso!');
      console.log(`üìù ID da mensagem: ${result.id}`);

      return result;
    } catch (error) {
      console.error('‚ùå Erro ao enviar mensagem:', error.message);
      throw error;
    }
  }

  // 6. Buscar usu√°rios na organiza√ß√£o
  async searchUsers(userId, searchTerm = 'teste') {
    try {
      console.log(`üîç Buscando usu√°rios com termo: ${searchTerm}`);

      const users = await this.teamsService.searchUsers(userId, searchTerm);

      console.log(`‚úÖ Encontrados ${users.length} usu√°rios:`);
      users.slice(0, 5).forEach((user, index) => {
        console.log(`${index + 1}. ${user.displayName} (${user.userPrincipalName})`);
      });

      return users;
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rios:', error.message);
      throw error;
    }
  }

  // 7. Exemplo completo de workflow
  async fullWorkflowExample(userId = 'user123') {
    try {
      console.log('üöÄ Iniciando workflow completo de exemplo...\n');

      // Passo 1: Verificar se j√° est√° autenticado
      const isAuthenticated = this.teamsAuth.isUserAuthenticated(userId);

      if (!isAuthenticated) {
        console.log('‚ö†Ô∏è  Usu√°rio n√£o autenticado. √â necess√°rio fazer login primeiro.');
        const authUrl = await this.startAuthentication(userId);
        console.log('\nüìã Para continuar, fa√ßa login usando a URL acima e depois execute novamente.\n');
        return { step: 'authentication_required', authUrl };
      }

      // Passo 2: Obter informa√ß√µes do usu√°rio
      const userInfo = await this.getUserInfo(userId);

      // Passo 3: Listar chats
      const chats = await this.listUserChats(userId);

      // Passo 4: Buscar usu√°rios
      await this.searchUsers(userId, 'user');

      console.log('\nüéâ Workflow completo executado com sucesso!');

      return {
        step: 'completed',
        userInfo,
        chatsCount: chats.length
      };

    } catch (error) {
      console.error('‚ùå Erro no workflow completo:', error.message);
      throw error;
    }
  }

  // 8. Exemplo de uso em controlador de Work Order
  async sendWorkOrderNotification(userId, workOrderData) {
    try {
      console.log('üìã Enviando notifica√ß√£o de Work Order...');

      // Criar mensagem formatada
      const message = `
üîß **Nova Ordem de Servi√ßo Criada**

**ID:** ${workOrderData.id}
**Cliente:** ${workOrderData.cliente}
**Prioridade:** ${workOrderData.prioridade}
**Data:** ${new Date().toLocaleDateString('pt-BR')}

**Descri√ß√£o:** ${workOrderData.descricao}

*Notifica√ß√£o autom√°tica do sistema CONAB+*
      `;

      // Buscar chat ou usu√°rio espec√≠fico para enviar
      const chats = await this.teamsService.getUserChats(userId);

      if (chats.length > 0) {
        // Enviar para o primeiro chat dispon√≠vel
        const result = await this.sendMessage(userId, chats[0].id, message);
        console.log('‚úÖ Notifica√ß√£o de Work Order enviada!');
        return result;
      } else {
        console.log('‚ö†Ô∏è  Nenhum chat dispon√≠vel para enviar notifica√ß√£o');
        return null;
      }

    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√£o de Work Order:', error.message);
      throw error;
    }
  }
}

export default TeamsUsageExample;

// Exemplo de uso direto (para testes)
// const example = new TeamsUsageExample();
// example.fullWorkflowExample('meu_usuario_id');
