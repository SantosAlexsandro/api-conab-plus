import TeamsAuthService from '../services/TeamsAuthService.js';
import teamsWorkOrderNotificationService from '../services/TeamsWorkOrderNotificationService.js';

// Script para configurar notifica√ß√µes de Work Orders no Teams

class WorkOrderNotificationSetup {
  constructor() {
    this.teamsAuth = TeamsAuthService;
    this.notificationService = teamsWorkOrderNotificationService;
  }

  // Configurar usu√°rio de notifica√ß√£o
  async setupNotificationUser(userId = 'work_order_bot') {
    try {
      console.log('üîß Configurando usu√°rio de notifica√ß√£o para Work Orders...');

      const isAuthenticated = this.teamsAuth.isUserAuthenticated(userId);

      if (!isAuthenticated) {
        console.log('‚ö†Ô∏è Usu√°rio n√£o autenticado. Gerando URL...');
        const authUrl = this.teamsAuth.generateAuthUrl(userId);
        console.log('üìã URL de autoriza√ß√£o:');
        console.log(authUrl);

        return {
          step: 'authentication_required',
          authUrl,
          userId
        };
      }

      this.notificationService.setDefaultNotificationUser(userId);
      const status = this.notificationService.getConfigurationStatus();

      console.log('‚úÖ Configura√ß√£o conclu√≠da!');
      console.log(`Chat ID: ${status.targetChatId}`);
      console.log(`Usu√°rio: ${status.notificationUser}`);
      console.log(`Configurado: ${status.configured}`);

      return { step: 'completed', status };

    } catch (error) {
      console.error('‚ùå Erro na configura√ß√£o:', error.message);
      throw error;
    }
  }

  // Completar autentica√ß√£o
  async completeAuth(userId, authCode) {
    try {
      console.log('üîÑ Completando autentica√ß√£o...');
      const tokens = await this.teamsAuth.exchangeCodeForTokens(authCode, userId);
      console.log('‚úÖ Autentica√ß√£o conclu√≠da!');

      this.notificationService.setDefaultNotificationUser(userId);
      await this.testNotification();

      return tokens;
    } catch (error) {
      console.error('‚ùå Erro na autentica√ß√£o:', error.message);
      throw error;
    }
  }

  // Testar notifica√ß√£o
  async testNotification() {
    try {
      console.log('üß™ Testando notifica√ß√£o...');

      const testData = {
        workOrder: 'OS-TEST-001',
        customerName: 'Cliente Teste',
        priority: 'alta',
        requesterContact: 'teste@conab.com',
        incidentAndReceiverName: 'Teste de integra√ß√£o Teams',
        uraRequestId: 'test-' + Date.now()
      };

      const result = await this.notificationService.sendWorkOrderCreatedNotification(testData);

      if (result.success) {
        console.log('‚úÖ Teste enviado com sucesso!');
      } else {
        console.error('‚ùå Falha no teste:', result.reason);
      }

      return result;
    } catch (error) {
      console.error('‚ùå Erro no teste:', error.message);
      throw error;
    }
  }

  // Verificar status atual
  async checkStatus() {
    try {
      console.log('üìä Verificando status das notifica√ß√µes...\n');

      const status = this.notificationService.getConfigurationStatus();

      console.log('üîß Configura√ß√£o atual:');
      console.log(`  - Chat de destino: ${status.targetChatId}`);
      console.log(`  - Usu√°rio de notifica√ß√£o: ${status.notificationUser}`);
      console.log(`  - Status de autentica√ß√£o: ${status.isAuthenticated ? '‚úÖ Autenticado' : '‚ùå N√£o autenticado'}`);
      console.log(`  - Sistema configurado: ${status.configured ? '‚úÖ Sim' : '‚ùå N√£o'}\n`);

      if (status.configured) {
        console.log('üéâ Sistema pronto para enviar notifica√ß√µes autom√°ticas!');
        console.log('üìã As notifica√ß√µes ser√£o enviadas automaticamente quando:');
        console.log('  - Uma nova Work Order for criada');
        console.log('  - Um t√©cnico for atribu√≠do');
      } else {
        console.log('‚ö†Ô∏è Sistema n√£o est√° totalmente configurado.');
        console.log('üí° Execute: setup.setupNotificationUser() para configurar');
      }

      return status;

    } catch (error) {
      console.error('‚ùå Erro ao verificar status:', error.message);
      throw error;
    }
  }

  // Testar notifica√ß√£o de t√©cnico atribu√≠do
  async testTechnicianNotification() {
    try {
      console.log('\nüß™ Testando notifica√ß√£o de t√©cnico atribu√≠do...');

      const testWorkOrderData = {
        orderId: 'OS-TEST-002',
        customerName: 'Cliente Teste T√©cnico',
        requesterContact: 'teste.tecnico@conab.com',
        uraRequestId: 'test-tech-' + Date.now()
      };

      const testTechnicianData = {
        id: 'TECH001',
        name: 'Jo√£o Silva (Teste)'
      };

      const result = await this.notificationService.sendTechnicianAssignedNotification(
        testWorkOrderData,
        testTechnicianData
      );

      if (result.success) {
        console.log('‚úÖ Teste de notifica√ß√£o de t√©cnico enviado com sucesso!');
        console.log(`üì± Mensagem ID: ${result.messageId}`);
      } else {
        console.error('‚ùå Falha no teste de t√©cnico:', result.reason);
      }

      return result;

    } catch (error) {
      console.error('‚ùå Erro no teste de t√©cnico:', error.message);
      throw error;
    }
  }
}

export default new WorkOrderNotificationSetup();

// Exemplo de uso:
// const setup = new WorkOrderNotificationSetup();
// await setup.setupNotificationUser('work_order_bot');
// await setup.completeAuth('work_order_bot', 'codigo_do_callback');
// await setup.testNotification();
